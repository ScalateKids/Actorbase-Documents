**** Driver usage: Generic example
#+begin_src scala
  import com.actorbase.driver._

  val auth = new ActorbaseDriver("localhost", 9999)
  val client = auth.authenticate("foo", "bar") // athentication method
  val coll = client.addCollection("people")
  // just a "key" -> "value" pair
  coll.insert("key" -> "value")
  // creating a simple Person class
  case class Person(name: String, age: Int)
  // insert Person type object..
  coll.insert("Seagal" -> Person("Steven", 64))
  //..and aother two
  coll.insert("Schwarzenegger" -> Person("Arnold", 68), "Stallone" -> Person("Sylvester", 70))
  // finally two totally different item
  coll.insert("Foo" -> 42, "bar" -> "baz")
  // printing all collection contents
  for ((k, v) <- coll)
    println(s"$k -> $v")
  // find some keys inside collection and do operations
  for ((k, v) <- coll.find("Arnold", "Foo")) {
    // operations...
  }

  // get all collections owned on the database
  val myCollections = client.getCollections
  // drop collections 'customers' and 'people'
  myCollections.drop("customers", "people")
#+end_src

**** Modify user password
#+begin_src scala
scala> client.changePassword("oldpw", "newpw")
res0: Boolean = true
#+end_src

**** Inserting into a collection
#+begin_src scala
scala> client.getCollection("people").insert("keyOne" -> "valueOne", "keyTwo" -> 42).insert(ActorbaseObject("obj" -> "inserting with object"))
#+end_src

**** Find into a collection
#+begin_src scala
scala> client.getCollection("people").find("keyOne" -> "valueOne", "keyTwo" -> 42)
res0: com.actorbase.driver.data.ActorbaseCollection

scala> client.getCollection("people").findOne("key" -> "value") // just a single value
res1: com.actorbase.driver.data.ActorbaseObject

#+end_src

**** Remove item
#+begin_src scala
scala> client.getCollection("people").remove("keyOne" -> "valueOne", "keyTwo" -> 42).remove(ActorbaseObject("obj" -> "inserting with object"))
#+end_src

**** Printing a collection
#+begin_src scala
scala> println(client.getCollection("people"))
{
  "owner": "foo",
  "collection": "people",
  "map": {
    "bar": "baz",
    "Foo": 42,
    "Seagal": {
        "type": "Person",
        "name": "Steven",
        "age": 64
    }
    "Schwarzenegger": {
        "type": "Person",
        "name": "Arnold",
        "age": 68
     }
    "Stallone": {
        "type": "Person",
        "name": "Sylvester",
        "age": 70
     }
  }
}

#+end_src

**** Printing some collections
#+begin_src scala
scala> client.getCollections.foreach(println)
#+end_src

**** Drop a collection
#+begin_src scala
scala> coll.drop
res0: Boolean = true
#+end_src

**** Drop some collections
#+begin_src scala
scala> client.dropCollections
res0: Boolean = true

scala> client.getCollections.drop
res0: Boolean = true
#+end_src

**** Count collections elements
#+begin_src scala
scala> println(client.getCollection("people").count)
res0: Int = 3
#+end_src

**** Contributor operations
#+begin_src scala
scala> val fooCollection = client.getCollection("foo")
scala> fooCollection.addContributor("aFriend")
res0: Boolean = true

scala> // remove

scala> fooCollection.removeContributor("aFriend")
res1: Boolean = true
#+end_src

**** Administrative operations
#+begin_src scala
scala> client.addUser("aUser")
res0: Boolean = true

scala> // remove

scala> client.removeUser("aUser")
res1: Boolean = true

scala> // reset
scala> client.resetPassword("anotherUser")
res1: Boolean = true
#+end_src
